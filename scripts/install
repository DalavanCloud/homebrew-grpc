#!/bin/bash
#
# Installs gRPC in a Homebrew or Linuxbrew installation.
#
# Prerequisites: Homebrew(Mac) / Linuxbrew(Linux) is installed.
#  - to install homebrew: see http://brew.sh
#  - to install linuxbrew: https://github.com/Homebrew/linuxbrew#installation
#
# Usage:
#
# Install grpc core:
#   curl -fsSL https://goo.gl/getgrpc | bash -
#
# Install grpc ruby:
#   curl -fsSL https://goo.gl/getgrpc | bash -s ruby
#
# Install grpc nodejs:
#   curl -fsSL https://goo.gl/getgrpc | bash -s nodejs
#
# Install grpc python:
#   curl -fsSL https://goo.gl/getgrpc | bash -s python
#
# Install grpc php:
#   curl -fsSL https://goo.gl/getgrpc | bash -s php

__grpc_check_for_brew() {
    which 'brew' >> /dev/null || {
        if [ "$(uname)" == "Darwin" ]; then
            echo "Cannot find the brew command - please ensure you have installed Homebrew (http://brew.sh)" 1>&2
        elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
            echo "Cannot find the brew command - please ensure you have installed Linuxbrew (https://github.com/Homebrew/linuxbrew#installation)" 1>&2
        else
            echo "Your system is neither a Mac nor Linux, so gRPC is not currently supported" 1>&2
        fi
        return 1;
    }
}

__grpc_brew_install() {
    local pkg=${!#}
    if brew list -1 | grep -q "^${pkg}\$"; then
        echo "$pkg is already installed" 1>&2
        return;
    else
        brew install $@
    fi
}

__grpc_brew_root() {
    __grpc_check_for_brew || return 1;
    brew --prefix
}

__grpc_install_with_brew() {
    # Explicitly install OpenSSL.
    if [ "$(uname)" != "Darwin" ]; then
        # there may be unresolved dependency issues installing openssl using linuxbrew on macs.
        __grpc_brew_install pkg-config
        __grpc_brew_install openssl
    else
        __grpc_brew_install openssl
    fi

    brew tap homebrew/dupes  # Needed for unzip and m4 (via google-protobuf)

    # On linux, explicitly install  unzip if it's not present, it's a protobuf dependency
    # TODO: add this to the official homebrew formula
    if [ "$(uname)" != "Darwin" ]; then
        which 'unzip' >> /dev/null || {
            __grpc_brew_install unzip
        }
    fi

    brew tap grpc/grpc

    # Explicitly install google-protobuf
    __grpc_brew_install --without-python google-protobuf

    # Install gRPC
    __grpc_brew_install grpc
}

__grpc_install_ruby_pkg() {
    which 'ruby' >> /dev/null || {
        echo "Could not detect ruby; is ruby installed properly? Please check $PATH and maybe install and try again" 1>&2
        return 1;
    }
    # support custom install locations: that's the default for linuxbrew and may
    # be used in homebrew install as well
    local brew_root=$(__grpc_brew_root) || return 1
    gem install grpc -- --with-grpc-dir=$brew_root
}

__grpc_install_nodejs_pkg() {
    which 'npm' >> /dev/null || {
        echo "Could not detect npm; is node installed properly? Please check $PATH and maybe install and try again" 1>&2
        return 1;
    }
    # support custom install locations: that's the default for linuxbrew and may
    # be used in homebrew install as well
    local brew_root=$(__grpc_brew_root) || return 1
    CXXFLAGS=-I${brew_root}/include LDFLAGS=-L${brew_root}/lib npm install --global grpc
}

__grpc_install_python_pkg() {
    which 'pip' >> /dev/null || {
        echo "Could not detect pip; is it (and python) installed properly? Please check $PATH and maybe install and try again" 1>&2
        return 1;
    }
    # support custom install locations, that's the default for linuxbrew and may
    # be used in homebrew install as well
    local brew_root=$(__grpc_brew_root) || return 1
    CFLAGS=-I${brew_root}/include LDFLAGS=-L${brew_root}/lib pip install grpcio
}

__grpc_install_php_pkg() {
    which 'phpize' >> /dev/null || {
        echo "Could not detect phpize; please make sure php5-dev is installed" 1>&2
        return 1;
    }
    brew install grpc-php
    local module_dir=`brew --prefix`/opt/grpc-php
    local default_extension_dir=`php -i 2>/dev/null | grep extension_dir | sed 's/.*=> //g'`
    for f in $default_extension_dir/*.so
    do
      ln -s $f $module_dir/$(basename $f) &> /dev/null || true
    done
}

__grpc_install_pkgs() {
    local known_pkgs="ruby python nodejs php"
    for pkg in $@; do
        if [[ "$known_pkgs" =~ "$pkg" ]]; then
            echo "installing grpc $pkg";
            local cmd="__grpc_install_${pkg}_pkg";
            $cmd;
        else
            echo "did not install package for ${pkg}; it was not known" 1>&2
        fi
    done
}

main() {
    __grpc_check_for_brew || exit 1;
    __grpc_install_with_brew;
    __grpc_install_pkgs "$@";
}

main "$@"
